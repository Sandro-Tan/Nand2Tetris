// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	// Op code: 0 for A-instruction; 1 for C-instruction
	// Notop: 0 for C-instruction; 1 for A-instruction
	Not (in=instruction[15], out=Notop);
    Mux16 (a=ALUout, b=instruction, sel=Notop, out=muxout);
	
	// A Register: load new A-instruction if it is A-instruction, or C-instruction with d1 = 1
	Or (a=Notop, b=instruction[5], out=intoA);
	ARegister (in=muxout, load=intoA, out=Aout, out[0..14]=addressM);
	
	// Select to operate on D and A (a==0), or D and M (a==1), if it is C-instruction
	And (a=instruction[15], b=instruction[12], out=AandM);
	Mux16 (a=Aout, b=inM, sel=AandM, out=AorM);
	
	// D Register: load new ALU output if d2 == 1 and it is C-instruction
	And (a=instruction[4], b=instruction[15], out=intoD);
	DRegister (in=ALUout, load=intoD, out=D);
	
	// x and y are both C-instruction; filtered by the two 'And' above
	ALU (x=D, y=AorM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=ALUout, zr=zr, ng=ng);
	
	// d3 == 1 and it is C-instruction
	And (a=instruction[3], b=instruction[15], out=writeM);
	
	// Jump conditions: make sure it is C-instruction
	// ALUout > 0 
	Or (a=zr, b=ng, out=temp0);
	Not (in=temp0, out=temp1);
	And (a=temp1, b=instruction[0], out=temp2);
	And (a=temp2, b=instruction[15], out=posout);
	
	// ALUout < 0
	And (a=ng, b=instruction[2], out=temp3);
	And (a=temp3, b=instruction[15], out=negout);
	
	// ALUout == 0
	And (a=zr, b=instruction[1], out=temp4);
	And (a=temp4, b=instruction[15], out=eqout);
	
	Or (a=posout, b=negout, out=temp5);
	Or (a=temp5, b=eqout, out=jumpfinal);
	
	PC (in=Aout, load=jumpfinal, inc=true, reset=reset, out[0..14]=pc);
	
	
}