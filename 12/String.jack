// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

	field Array str;
	field int maxLen, currLen;

	
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
		let currLen = 0;
		let maxLen = maxLength;
		
		if (maxLength < 0) {do Sys.error(14);}  // Maximum length must be non-negative
		if (maxLength = 0) {let str = Array.new(1);}
		if (maxLength > 0) {let str = Array.new(maxLength);}
		
		return this;
    }

    /** Disposes this string. */
    method void dispose() {
		do str.dispose();
		return;
    }

    /** Returns the current length of this string. */
    method int length() {
		var int i;
		let i = 0;
	
		// IMPORTANT: Must check if (i < max length allowed)
		// Otherwise the screen will show black squares
		while ( (~(str[i] = null)) & (i < maxLen) ) {
			let i = i + 1;		
		}
		let currLen = i;
		return (currLen);
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
		var String temp;
		
		let temp = this;
		if (j > temp.length()) {do Sys.error(15);} //String index out of bounds
		
		return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
		var String temp;
		
		let temp = this;
		if (j > temp.length()) {do Sys.error(16);} //String index out of bounds
		else {let str[j] = c;}
		
		return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
		var String temp;
		
		// Set a temp String object pointed to the current object, like "self" in Python
		let temp = this;
		if (temp.length() = maxLen) {do Sys.error(17);} // String is full
		if (temp.length() < maxLen) {do temp.setCharAt(temp.length(), c);}
		
		return temp;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
		var String temp;
		
		let temp = this;
		if (temp.length() = 0) {do Sys.error(18);} // String is empty
		else {let str[currLen-1] = 0;}
		
		return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
		var int i, d, val;
		var String temp;
		
		let val = 0;
		let temp = this;
		
		// positive number
		if ((str[0] > 47) & (str[0] < 58)) {
			let i = 0;
			while ((i < temp.length()) & (str[i] > 47) & (str[i] < 58)) {
				let d = str[i] - 48;
				let val = (val * 10) + d;
				let i = i + 1;
				}
		}
		
		// negative number
		if (str[0] = 45) {
			let i = 1;
			while ((i < temp.length()) & (str[i] > 47) & (str[i] < 58)) {
				let d = str[i] - 48;
				let val = (val * 10) + d;
				let i = i + 1;
			}
			let val = -val;
		}
		
		return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
		var int lastDigit, c, i;
		var String temp;
		var char s;
		
		let temp = this;


		if (val = 0) {do temp.setCharAt(0, 48);}
		
		// Get a string of numbers in reverse order (for negative numbers)
		if (val < 0) {
		
			let i = 1;
			
			while (val < 0) {
				let lastDigit = val - (val / 10 * 10); // lastDigit = val % 10
				let c = -lastDigit + 48;
				if (i < maxLen) {
					do temp.setCharAt(i, c);
					let val = val / 10;
					let i = i + 1;
				}
				else {do Sys.error(19);} // Insufficient string capacity
			}
		
		// Reverse the string to correct order
			let i = 1;
			while (i < (temp.length() / 2 + 1)) {
				let s = str[i];
				let str[i] = str[temp.length() - i];
				let str[temp.length() - i] = s;
				let i = i + 1;
			}
		// Add a minus sign
			do temp.setCharAt(0, 45);
		}
		
		
		// Get a string of numbers in reverse order (for positive numbers)
		if (val > 0) {
			let i = 0;
			
			while (val > 0) {
				let lastDigit = val - (val / 10 * 10); // lastDigit = val % 10
				let c = lastDigit + 48;
				
				if (i < maxLen) {
					do temp.setCharAt(i, c);
					let val = val / 10;
					let i = i + 1;
				}
				else {do Sys.error(19);} // Insufficient string capacity
			}
			
		// Reverse the string to correct order
			let i = 0;
				while (i < (temp.length() / 2)) {
					let s = str[i];
					let str[i] = str[temp.length() - 1 - i];
					let str[temp.length() - 1 - i] = s;
					let i = i + 1;
			}
		}
		
		return;
    }

    /** Returns the new line character. */
    function char newLine() {
		return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
		return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
		return 34;
    }
}
